#print(f"{int(input()):+09}")
#это работает вроде

#print(f"{float(input()):#10.2f)}")
#с этим вариантом не получается совсем. не понимаю, как делать с плавующей точкой
#print(f"{int(input()):b_}")
#здесь не знаю, как разделить нижним подчеркиванием

#Необходимо написать программу, которая будет считывать три числа и выводить их в определенном формате.
# Первое число целое, второе с плавающей точкой, третье целое неотрицательное. По примерам необходимо определить требуемый формат данных.
#Входные данные

#  102
#  3.1415926535
#  1127
#Выходные данные

#  +000000102
#  #####3.14
#  0000_0100_0110_0111

#Входные данные

#  -1024
#  -123.7
#   65535
#Выходные данные

#  -000001024
#   ###-123.70
#   1111_1111_1111_1111


#a = input()

#print(a.replace(_old:"!@#%", _new:"len()").lower(a))
#здесь я тоже сдаюсь. я нихренашеньки не поняла.

# TODO Двоеточие используется для аннотации типов, если же ты хочешь передать значение в определенный аргумент, то используют равно:
#print(a.replace(_old="!@#%", _new="len()").lower(a))
# TODO но если ты зажмешь клавишу ctrl и нажмешь на метод replace, то увидишь что она не принимает именнованных аргументов:
#  def replace(self, *args, **kwargs): # real signature unknown
#  в реплайсе передают параметыр позиционно:
#print(a.replace("!@#%", "len()").lower(a))

# TODO если ты хочешь вызвать функцию лен, то не ставь кавычки , в твоем случае то просто строка
#print(a.replace("!@#%", len()).lower(a))

# TODO не пытайся все задачи решать в 1 строчку, пробуй как получается, потом уже оптимизируй
#  Первое что тебе нужно пройтись циклом по строке и заменить символы на пробелы
#  Для подсчета колличества замененых символом, используй цикл фор с щетчиком
#  Пример цикла, который считает колличество нечетных цифр
#  ...
#  count = 0
#  for num in range(10):
#      if num % 2 == 0:
#          count += 1
#  print(count)
#  ...
#  А после того как уже все посчитаешь, можешь выводить в нижнем регистре

#Необходимо написать программу, которая будет считывать со стандартного ввода строку, далее будет приводить ее к нижнему регистру,
# а также будет заменять символы “!”, “%”, “#”, “@” на пустую строку.
# В итоге нужно будет вывести в первой строке число замененных символов, а во второй преобразованную строку.

#Входные данные
#Hello World!@#%

#Выходные данные

#4
#hello world

#1 задача


#последний не работает. вывод не тот
a = input()
a_l = a.lower()

sumbols_rep = "!@#%"

count = 0

for sumbol in sumbols_rep:
    a_l = a_l.replace(sumbol, " ")
    count += 1

print(f"{count}\n{a_l}")